Rcpp::Function APIgetC = G['APIgetChannel'];
for(i=0;i<res.length();i++){
if(res[i][1]=='youtube'){
Rcout << i;
if(res[i][3]=='channel'){
List channel = APIgetChannel(res[i][3]);
output.insert(output.end(),channel);
}
if(res[i][3]=='c' || res[i][3]=='user'){
List channel = APIgetChannelForUsername(res[i][3]);
}
}
}
return output;
}
")
cppFunction("
DataFrame getChannelDetails(List res, DataFrame output){
Rcpp::Environment G = Rcpp::Environment::global_env();
Rcpp::Function APIgetC = G['APIgetChannel'];
for(i=0;i<res.length();i++){
if(res[i][1]=='youtube'){
Rcout << i;
if(res[i][3]=='channel'){
List channel = APIgetC(res[i][3]);
output.insert(output.end(),channel);
}
if(res[i][3]=='c' || res[i][3]=='user'){
List channel = APIgetChannelForUsername(res[i][3]);
}
}
}
return output;
}
")
checkAndReplaceNull <- function(item, type = "string"){
switch(
type,
"string"= return(if (is.null(item)) NA else item),
"integer"= return(if (is.null(item)) NA else as.numeric(item)),
"list"= return(if (is.null(item)) NA else paste(item, collapse = " "))
)
}
getChannel <- function(raw_item){
id <- checkAndReplaceNull(raw_item$id)
snippet_title <- checkAndReplaceNull(raw_item$snippet$title)
snippet_description <- checkAndReplaceNull(raw_item$snippet$description)
snippet_country <- checkAndReplaceNull(raw_item$snippet$country)
snippet_defaultLanguage <- checkAndReplaceNull(raw_item$snippet$defaultLanguage)
contentDetails_relatedPlaylist_likes <- checkAndReplaceNull(raw_item$contentDetails$relatedPlaylists$likes)
contentDetails_relatedPlaylist_favourites <- checkAndReplaceNull(raw_item$contentDetails$relatedPlaylists$favorites)
contentDetails_relatedPlaylist_uploads <-  checkAndReplaceNull(raw_item$contentDetails$relatedPlaylists$uploads)
statistics_viewCount <- checkAndReplaceNull(raw_item$statistics$viewCount,"integer")
statistics_subscribeCount<- checkAndReplaceNull(raw_item$statistics$subscriberCount,"integer")
statistics_videoCount <- checkAndReplaceNull(raw_item$statistics$videoCount,"integer")
topicDetails_topicIds <-  checkAndReplaceNull(raw_item$topicDetails$topicIds,"list")
topicDetails_topicCategories <- checkAndReplaceNull(raw_item$topicDetails$topicCategories,"list")
return(list(id,
snippet_title,
snippet_description,
snippet_country,
snippet_defaultLanguage,
contentDetails_relatedPlaylist_likes,
contentDetails_relatedPlaylist_favourites,
contentDetails_relatedPlaylist_uploads,
statistics_viewCount,
statistics_subscribeCount,
statistics_videoCount,
topicDetails_topicIds,
topicDetails_topicCategories))
}
APIgetChannel <- function(channelId){
url <- paste0("https://youtube.googleapis.com/youtube/v3/channels?part=snippet%2CcontentDetails%2CbrandingSettings%2Cstatistics%2CtopicDetails%2Cid&id=", channelId, "&key=AIzaSyB4AhRo6DtkmySLEF4AaVwGwSV6oFKc0fQ")
url <- URLencode(url)
res <- GET(url)
res_data <- content(res)
return(res_data)
}
APIgetChannelForUsername <- function(username){
url <- paste0("https://youtube.googleapis.com/youtube/v3/channels?part=snippet%2CcontentDetails%2CbrandingSettings%2Cstatistics%2CtopicDetails%2Cid&forUsername=", username, "&key=AIzaSyB4AhRo6DtkmySLEF4AaVwGwSV6oFKc0fQ")
url <- URLencode(url)
res <- GET(url)
res_data <- content(res)
return(res_data)
}
APIsearchChannel <- function(username){
url <- paste0("https://youtube.googleapis.com/youtube/v3/search?part=snippet&maxResults=25&q=", username, "&type=channel&key=AIzaSyB4AhRo6DtkmySLEF4AaVwGwSV6oFKc0fQ")
url <- URLencode(url)
res <- GET(url)
res_data <- content(res)
return(res_data)
}
cppFunction("
DataFrame getChannelDetails(List res, DataFrame output){
Rcpp::Environment G = Rcpp::Environment::global_env();
Rcpp::Function APIgetChannel = G['APIgetChannel'];
for(i=0;i<res.length();i++){
if(res[i][1]=='youtube'){
Rcout << i;
if(res[i][3]=='channel'){
List channel = APIgetChannel(res[i][3]);
output.insert(output.end(),channel);
}
if(res[i][3]=='c' || res[i][3]=='user'){
List channel = APIgetChannelForUsername(res[i][3]);
}
}
}
return output;
}
")
results
results
url <- "https://socialblade.com/youtube/top/100/mostsubscribed"
res <- read_html(url) %>%
html_elements('a') %>%
html_attr(name="href")
#split links to obtain each part
clusterExport(clusters, c("results"))
results <- parLapply(cl=clusters, 1:length(results), fun= function(x){
strsplit(results[x],split="/")
})
stopCluster(clusters)
url <- "https://socialblade.com/youtube/top/100/mostsubscribed"
res <- read_html(url) %>%
html_elements('a') %>%
html_attr(name="href")
#split links to obtain each part
clusterExport(clusters, c("results"))
#preparing for code optimization
cores <- detectCores()
clusters <- makeCluster(cores-1)
url <- "https://socialblade.com/youtube/top/100/mostsubscribed"
res <- read_html(url) %>%
html_elements('a') %>%
html_attr(name="href")
#split links to obtain each part
clusterExport(clusters, c("results"))
results <- parLapply(cl=clusters, 1:length(results), fun= function(x){
strsplit(results[x],split="/")
})
results <- parLapply(cl=clusters, 1:length(res), fun= function(x){
strsplit(results[x],split="/")
})
#split links to obtain each part
clusterExport(clusters, c("res"))
results <- parLapply(cl=clusters, 1:length(res), fun= function(x){
strsplit(res[x],split="/")
})
stopCluster(clusters)
data <- data.frame(id = 0,
snippet_title = "",
snippet_description = "",
snippet_country="",
snippet_defaultLanguage="",
contentDetails_relatedPlaylists_likes = "",
contentDetails_relatedPlaylists_favorites = "",
contentDetails_relatedPlaylists_uploads = "",
statistics_viewCount = 0,
statistics_subscriberCount = 0,
statistics_videoCount = 0,
topicDetails_topicsIds = "",
topicDetails_topicCategories = "",
stringsAsFactors=FALSE)
results
url <- "https://socialblade.com/youtube/top/100/mostsubscribed"
res <- read_html(url) %>%
html_elements('a') %>%
html_attr(name="href")
res
#split links to obtain each part
clusterExport(clusters, c("res"))
results <- parLapply(cl=clusters, 1:length(res), fun= function(x){
strsplit(res[x],split="/")
})
source("data_gathering_utils.R")
library(httr)
library(rvest)
library(Rcpp)
library(parallel)
#preparing for code optimization
cores <- detectCores()
clusters <- makeCluster(cores-1)
#web scraping to get 100 most subscribed channels
url <- "https://socialblade.com/youtube/top/100/mostsubscribed"
res <- read_html(url) %>%
html_elements('a') %>%
html_attr(name="href")
#split links to obtain each part
clusterExport(clusters, c("res"))
results <- parLapply(cl=clusters, 1:length(res), fun= function(x){
strsplit(res[x],split="/")
})
stopCluster(clusters)
results
source("data_gathering_utils.R")
library(httr)
library(rvest)
library(Rcpp)
library(parallel)
#preparing for code optimization
cores <- detectCores()
clusters <- makeCluster(cores-1)
#web scraping to get 100 most subscribed channels
url <- "https://socialblade.com/youtube/top/100/mostsubscribed"
res <- read_html(url) %>%
html_elements('a') %>%
html_attr(name="href")
#split links to obtain each part
clusterExport(clusters, c("res"))
results <- parLapply(cl=clusters, 1:length(res), fun= function(x){
strsplit(res[x],split="/")
})
stopCluster(clusters)
data <- data.frame(id = 0,
snippet_title = "",
snippet_description = "",
snippet_country="",
snippet_defaultLanguage="",
contentDetails_relatedPlaylists_likes = "",
contentDetails_relatedPlaylists_favorites = "",
contentDetails_relatedPlaylists_uploads = "",
statistics_viewCount = 0,
statistics_subscriberCount = 0,
statistics_videoCount = 0,
topicDetails_topicsIds = "",
topicDetails_topicCategories = "",
stringsAsFactors=FALSE)
channels_strings <- c()
i_channels <- 1
username_strings <- c()
i_username <- 1
for (i in 1:length(results)){
if(results[i,2]=="youtube"){
if(results[i,3]=="channel"){
channel <- APIgetChannel(results[i,4])
data <- rbind(data,getChannel(channel$items[[1]]))
}
if(results[i,3]=="c" || results[i,3]=="user"){
#accounting for trapnation
if(results[i,4]=="-trapnation"){results[i,4]<-"trapnation"}
#accounting for billie eilish
if(results[i,4]==""){results[i,4]<-"billie eilish"}
channel <- APIgetChannelForUsername(results[i,4])
if(channel$pageInfo$totalResults != 0){
data <- rbind(data,getChannel(channel$items[[1]]))
}
else{
channels <- APIsearchChannel(results[i,4])
channel <- APIgetChannel(channels$items[[1]]$snippet$channelId)
data <- rbind(data,getChannel(channel$items[[1]]))
}
}
}
}
results[1,2]
results[[1,2]]
results
results[1]
results[1][1]
results[1][1][1]
results[[1]]
results[[1]][1]
results[[1]][2]
results[[1,2]]
results[[1]][[2]]
results[[1]][[1]]
results[,2]
results[1]
results[1][2]
results[1][[2]]
mode(results[1])
results[200]
results[200][1]
results[200][2]
results[200,2]
runGitHub("RYouTubeDashboard", "eliroc98", "master")
library(shiny)
runGitHub("RYouTubeDashboard", "eliroc98", "master")
runGitHub("RYouTubeDashboard", "eliroc98", "master")
runGitHub("RYouTubeDashboard", "eliroc98", "master")
runApp('project/YouTubeChannels')
runApp('project/YouTubeChannels')
runApp('project/YouTubeChannels')
runApp('project/YouTubeChannels')
runApp('project/YouTubeChannels')
runApp('project/YouTubeChannels')
runApp('project/YouTubeChannels')
runApp('project/YouTubeChannels')
runApp('project/YouTubeChannels')
runApp('project/YouTubeChannels')
runApp('project/YouTubeChannels')
runApp('project/YouTubeChannels')
summary(data)
#import data: data acquisition is performed once because of the YouTube API limit quota
data <- read.csv(file = 'data/dataset_adjusted.csv')
setwd("C:/Users/lizzy/Desktop/Universita/coding for data science and data management/R/project/YouTubeChannels")
setwd("C:/Users/lizzy/Desktop/Universita/coding for data science and data management/R/project/YouTubeChannels")
#import data: data acquisition is performed once because of the YouTube API limit quota
data <- read.csv(file = 'data/dataset_adjusted.csv')
summary(data)
source("r_files/utils")
source("r_files\\utils")
source("r_files\\utils.R")
source("r_files\\utils.R")
summary_stats_table <- summary_stats(data,c("statistics_subscriberCount"),c("median"))
summary_stats_table <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
#import data: data acquisition is performed once because of the YouTube API limit quota
data <- read.csv(file = 'data/dataset_adjusted.csv')
max_subs <- max(data$statistics_subscriberCount, na.rm=T)
summary_stats_table <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
summary_stats_table <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
summary_stats_table <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
setwd("C:/Users/lizzy/Desktop/Universita/coding for data science and data management/R/project/YouTubeChannels")
library(shiny)
library('tidyverse')
library(DT)
source("r_files\\utils.R")
#import data: data acquisition is performed once because of the YouTube API limit quota
data <- read.csv(file = 'data/dataset_adjusted.csv')
summary_stats_table <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
summary_stats_table <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
summary_stats_table <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
summary_stats_table
data["id"]
source("r_files\\utils.R")
summary_stats_table <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
summary_stats_table <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
max_subs
summary_stats_table
table <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
table()
table
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
table_sum
mode( 4.43e+07)
mode(data$statistics_subscriberCount)
summary(data)
median(data$statistics_subscriberCount)
median(data$statistics_subscriberCount, na.rm=T)
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
median(data["statistics_subscriberCount"], na.rm=T)
median(data[,"statistics_subscriberCount"], na.rm=T)
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
table_sum
View(table_sum)
View(table_sum)
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
View(table_sum)
View(table_sum)
df <- data.frame(c("Variable",c("median")),row.names = 1)
View(df)
View(df)
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
View(table_sum)
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
View(table_sum)
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
df <- data.frame(c("Variable",c("median")),row.names = 1)
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
View(table_sum)
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
View(table_sum)
View(table_sum)
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
View(table_sum)
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
View(table_sum)
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
View(table_sum)
"c"+"o"
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
View(table_sum)
source("r_files\\utils.R")
table_sum <- summary_stats_table(data,c("statistics_subscriberCount"),c("median"))
View(table_sum)
colnames(data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
1%%2
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(bslib)
runApp()
runApp()
runApp()
ggplot(data, aes(x = c(data$statistics_subscriberCount,data$statistics_viewCount))) +
geom_col(position = position_dodge())
ggplot(data, aes(x = c(data$statistics_subscriberCount,data$statistics_viewCount))) +
geom_col(position = position_dodge())
c(data$statistics_subscriberCount,data$statistics_viewCount)
df<-data.frame(count=c(data$statistics_subscriberCount,data$statistics_viewCount),count_type=c(rep(0,nrow(data$statistics_subscriberCount)),rep(1,nrow(data$statistics_viewCount))))
nrow(data$statistics_viewCount)
df<-data.frame(count=c(data$statistics_subscriberCount,data$statistics_v),count_type=c(rep(0,nrow(data)),rep(1,nrow(data))))
ggplot(data, aes(x = count,fill=count_type)) +
geom_col(position = position_dodge())
df<-data.frame(count=c(data$statistics_subscriberCount,data$statistics_v),count_type=c(rep(0,nrow(data)),rep(1,nrow(data))))
ggplot(df, aes(x = count,fill=count_type)) +
geom_col(position = position_dodge())
ggplot(df, aes(x = count,fill=count_type,y=..density..)) +
geom_col(position = position_dodge())
df<-data.frame(channel<-rep(data$snippet_title,2), count=c(data$statistics_subscriberCount,data$statistics_v),count_type=c(rep(0,nrow(data)),rep(1,nrow(data))))
ggplot(df, aes(x = channel,fill=count_type,y=count)) +
geom_col(position = position_dodge())
df<-data.frame(channel<-rep(data$snippet_title,2), count=c(data$statistics_subscriberCount,data$statistics_viewCount),count_type=c(rep(0,nrow(data)),rep(1,nrow(data))))
ggplot(df, aes(x = channel,fill=count_type,y=count)) +
geom_col(position = position_dodge())
df<-data.frame(channel<-rep(data$snippet_title,2), count=c(data$statistics_subscriberCount,data$statistics_viewCount),count_type=c(rep("subscriberCount",nrow(data)),rep("viewCount",nrow(data))))
ggplot(df, aes(x = channel,fill=count_type,y=count)) +
geom_col(position = position_dodge())
View(df)
ggplot(df[1:10], aes(x = channel,fill=count_type,y=count)) +
geom_col(position = position_dodge())
ggplot(df[1:10,], aes(x = channel,fill=count_type,y=count)) +
geom_col(position = position_dodge())
d<-data[:50,]
d<-data[1:50,]
nrows(d)
nrow(d)
d<-data[1:10,]
df<-data.frame(channel<-rep(d$snippet_title,2), count=c(d$statistics_subscriberCount,d$statistics_viewCount),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
ggplot(df, aes(x = channel,fill=count_type,y=count)) +
geom_col(position = position_dodge())
