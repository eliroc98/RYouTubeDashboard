}
")
mode(results)
cppFunction("
DataFrame getChannelDetails(List res){
Rcout << res.length();
DataFrame df = DataFrame::create();
return df;
}
")
getChannelDetails(results)
d <- getChannelDetails(results)
results
results[,3]
results[[3]]
results[3,]
results
res <- read_html(url) %>%
html_elements('a') %>%
html_attr(name="href")
res
strsplit(res[174])
strsplit(res[174],"/")
strsplit(res[274],"/")
strsplit(res[274],"/")
cppFunction("
DataFrame getChannelDetails(List res, DataFrame output){
for(i=0;i<res.length();i++){
if(res[i][1]=='youtube'){
Rcout << i;
if(res[i][3]=='channel'){
List channel = APIgetChannel(res[i][3]);
output.insert(output.end(),channel);
}
if(res[i][3]=='c' || res[i][3]=='user'){
List channel = APIgetChannelForUsername(res[i][3]);
}
}
}
return output;
}
")
cppFunction("
DataFrame getChannelDetails(List res, DataFrame output){
for(i=0;i<res.length();i++){
if(res[i][1]=='youtube'){
Rcout << i;
if(res[i][3]=='channel'){
List channel = APIgetChannel(res[i][3]);
output.insert(output.end(),channel);
}
if(res[i][3]=='c' || res[i][3]=='user'){
}
}
}
return output;
}
")
cppFunction("
Rcpp::Environment G = Rcpp::Environment::global_env();
Rcpp::Function APIgetChannel = G['APIgetChannel'];
DataFrame getChannelDetails(List res, DataFrame output){
for(i=0;i<res.length();i++){
if(res[i][1]=='youtube'){
Rcout << i;
if(res[i][3]=='channel'){
List channel = APIgetChannel(res[i][3]);
output.insert(output.end(),channel);
}
if(res[i][3]=='c' || res[i][3]=='user'){
List channel = APIgetChannelForUsername(res[i][3]);
}
}
}
return output;
}
")
cppFunction("
DataFrame getChannelDetails(List res, DataFrame output){
Rcpp::Environment G = Rcpp::Environment::global_env();
Rcpp::Function APIgetChannel = G['APIgetChannel'];
for(i=0;i<res.length();i++){
if(res[i][1]=='youtube'){
Rcout << i;
if(res[i][3]=='channel'){
List channel = APIgetChannel(res[i][3]);
output.insert(output.end(),channel);
}
if(res[i][3]=='c' || res[i][3]=='user'){
List channel = APIgetChannelForUsername(res[i][3]);
}
}
}
return output;
}
")
cppFunction("
DataFrame getChannelDetails(List res, DataFrame output){
Rcpp::Environment G = Rcpp::Environment::global_env();
Rcpp::Function APIgetC = G['APIgetChannel'];
for(i=0;i<res.length();i++){
if(res[i][1]=='youtube'){
Rcout << i;
if(res[i][3]=='channel'){
List channel = APIgetChannel(res[i][3]);
output.insert(output.end(),channel);
}
if(res[i][3]=='c' || res[i][3]=='user'){
List channel = APIgetChannelForUsername(res[i][3]);
}
}
}
return output;
}
")
cppFunction("
DataFrame getChannelDetails(List res, DataFrame output){
Rcpp::Environment G = Rcpp::Environment::global_env();
Rcpp::Function APIgetC = G['APIgetChannel'];
for(i=0;i<res.length();i++){
if(res[i][1]=='youtube'){
Rcout << i;
if(res[i][3]=='channel'){
List channel = APIgetC(res[i][3]);
output.insert(output.end(),channel);
}
if(res[i][3]=='c' || res[i][3]=='user'){
List channel = APIgetChannelForUsername(res[i][3]);
}
}
}
return output;
}
")
checkAndReplaceNull <- function(item, type = "string"){
switch(
type,
"string"= return(if (is.null(item)) NA else item),
"integer"= return(if (is.null(item)) NA else as.numeric(item)),
"list"= return(if (is.null(item)) NA else paste(item, collapse = " "))
)
}
getChannel <- function(raw_item){
id <- checkAndReplaceNull(raw_item$id)
snippet_title <- checkAndReplaceNull(raw_item$snippet$title)
snippet_description <- checkAndReplaceNull(raw_item$snippet$description)
snippet_country <- checkAndReplaceNull(raw_item$snippet$country)
snippet_defaultLanguage <- checkAndReplaceNull(raw_item$snippet$defaultLanguage)
contentDetails_relatedPlaylist_likes <- checkAndReplaceNull(raw_item$contentDetails$relatedPlaylists$likes)
contentDetails_relatedPlaylist_favourites <- checkAndReplaceNull(raw_item$contentDetails$relatedPlaylists$favorites)
contentDetails_relatedPlaylist_uploads <-  checkAndReplaceNull(raw_item$contentDetails$relatedPlaylists$uploads)
statistics_viewCount <- checkAndReplaceNull(raw_item$statistics$viewCount,"integer")
statistics_subscribeCount<- checkAndReplaceNull(raw_item$statistics$subscriberCount,"integer")
statistics_videoCount <- checkAndReplaceNull(raw_item$statistics$videoCount,"integer")
topicDetails_topicIds <-  checkAndReplaceNull(raw_item$topicDetails$topicIds,"list")
topicDetails_topicCategories <- checkAndReplaceNull(raw_item$topicDetails$topicCategories,"list")
return(list(id,
snippet_title,
snippet_description,
snippet_country,
snippet_defaultLanguage,
contentDetails_relatedPlaylist_likes,
contentDetails_relatedPlaylist_favourites,
contentDetails_relatedPlaylist_uploads,
statistics_viewCount,
statistics_subscribeCount,
statistics_videoCount,
topicDetails_topicIds,
topicDetails_topicCategories))
}
APIgetChannel <- function(channelId){
url <- paste0("https://youtube.googleapis.com/youtube/v3/channels?part=snippet%2CcontentDetails%2CbrandingSettings%2Cstatistics%2CtopicDetails%2Cid&id=", channelId, "&key=AIzaSyB4AhRo6DtkmySLEF4AaVwGwSV6oFKc0fQ")
url <- URLencode(url)
res <- GET(url)
res_data <- content(res)
return(res_data)
}
APIgetChannelForUsername <- function(username){
url <- paste0("https://youtube.googleapis.com/youtube/v3/channels?part=snippet%2CcontentDetails%2CbrandingSettings%2Cstatistics%2CtopicDetails%2Cid&forUsername=", username, "&key=AIzaSyB4AhRo6DtkmySLEF4AaVwGwSV6oFKc0fQ")
url <- URLencode(url)
res <- GET(url)
res_data <- content(res)
return(res_data)
}
APIsearchChannel <- function(username){
url <- paste0("https://youtube.googleapis.com/youtube/v3/search?part=snippet&maxResults=25&q=", username, "&type=channel&key=AIzaSyB4AhRo6DtkmySLEF4AaVwGwSV6oFKc0fQ")
url <- URLencode(url)
res <- GET(url)
res_data <- content(res)
return(res_data)
}
cppFunction("
DataFrame getChannelDetails(List res, DataFrame output){
Rcpp::Environment G = Rcpp::Environment::global_env();
Rcpp::Function APIgetChannel = G['APIgetChannel'];
for(i=0;i<res.length();i++){
if(res[i][1]=='youtube'){
Rcout << i;
if(res[i][3]=='channel'){
List channel = APIgetChannel(res[i][3]);
output.insert(output.end(),channel);
}
if(res[i][3]=='c' || res[i][3]=='user'){
List channel = APIgetChannelForUsername(res[i][3]);
}
}
}
return output;
}
")
results
results
url <- "https://socialblade.com/youtube/top/100/mostsubscribed"
res <- read_html(url) %>%
html_elements('a') %>%
html_attr(name="href")
#split links to obtain each part
clusterExport(clusters, c("results"))
results <- parLapply(cl=clusters, 1:length(results), fun= function(x){
strsplit(results[x],split="/")
})
stopCluster(clusters)
url <- "https://socialblade.com/youtube/top/100/mostsubscribed"
res <- read_html(url) %>%
html_elements('a') %>%
html_attr(name="href")
#split links to obtain each part
clusterExport(clusters, c("results"))
#preparing for code optimization
cores <- detectCores()
clusters <- makeCluster(cores-1)
url <- "https://socialblade.com/youtube/top/100/mostsubscribed"
res <- read_html(url) %>%
html_elements('a') %>%
html_attr(name="href")
#split links to obtain each part
clusterExport(clusters, c("results"))
results <- parLapply(cl=clusters, 1:length(results), fun= function(x){
strsplit(results[x],split="/")
})
results <- parLapply(cl=clusters, 1:length(res), fun= function(x){
strsplit(results[x],split="/")
})
#split links to obtain each part
clusterExport(clusters, c("res"))
results <- parLapply(cl=clusters, 1:length(res), fun= function(x){
strsplit(res[x],split="/")
})
stopCluster(clusters)
data <- data.frame(id = 0,
snippet_title = "",
snippet_description = "",
snippet_country="",
snippet_defaultLanguage="",
contentDetails_relatedPlaylists_likes = "",
contentDetails_relatedPlaylists_favorites = "",
contentDetails_relatedPlaylists_uploads = "",
statistics_viewCount = 0,
statistics_subscriberCount = 0,
statistics_videoCount = 0,
topicDetails_topicsIds = "",
topicDetails_topicCategories = "",
stringsAsFactors=FALSE)
results
url <- "https://socialblade.com/youtube/top/100/mostsubscribed"
res <- read_html(url) %>%
html_elements('a') %>%
html_attr(name="href")
res
#split links to obtain each part
clusterExport(clusters, c("res"))
results <- parLapply(cl=clusters, 1:length(res), fun= function(x){
strsplit(res[x],split="/")
})
source("data_gathering_utils.R")
library(httr)
library(rvest)
library(Rcpp)
library(parallel)
#preparing for code optimization
cores <- detectCores()
clusters <- makeCluster(cores-1)
#web scraping to get 100 most subscribed channels
url <- "https://socialblade.com/youtube/top/100/mostsubscribed"
res <- read_html(url) %>%
html_elements('a') %>%
html_attr(name="href")
#split links to obtain each part
clusterExport(clusters, c("res"))
results <- parLapply(cl=clusters, 1:length(res), fun= function(x){
strsplit(res[x],split="/")
})
stopCluster(clusters)
results
source("data_gathering_utils.R")
library(httr)
library(rvest)
library(Rcpp)
library(parallel)
#preparing for code optimization
cores <- detectCores()
clusters <- makeCluster(cores-1)
#web scraping to get 100 most subscribed channels
url <- "https://socialblade.com/youtube/top/100/mostsubscribed"
res <- read_html(url) %>%
html_elements('a') %>%
html_attr(name="href")
#split links to obtain each part
clusterExport(clusters, c("res"))
results <- parLapply(cl=clusters, 1:length(res), fun= function(x){
strsplit(res[x],split="/")
})
stopCluster(clusters)
data <- data.frame(id = 0,
snippet_title = "",
snippet_description = "",
snippet_country="",
snippet_defaultLanguage="",
contentDetails_relatedPlaylists_likes = "",
contentDetails_relatedPlaylists_favorites = "",
contentDetails_relatedPlaylists_uploads = "",
statistics_viewCount = 0,
statistics_subscriberCount = 0,
statistics_videoCount = 0,
topicDetails_topicsIds = "",
topicDetails_topicCategories = "",
stringsAsFactors=FALSE)
channels_strings <- c()
i_channels <- 1
username_strings <- c()
i_username <- 1
for (i in 1:length(results)){
if(results[i,2]=="youtube"){
if(results[i,3]=="channel"){
channel <- APIgetChannel(results[i,4])
data <- rbind(data,getChannel(channel$items[[1]]))
}
if(results[i,3]=="c" || results[i,3]=="user"){
#accounting for trapnation
if(results[i,4]=="-trapnation"){results[i,4]<-"trapnation"}
#accounting for billie eilish
if(results[i,4]==""){results[i,4]<-"billie eilish"}
channel <- APIgetChannelForUsername(results[i,4])
if(channel$pageInfo$totalResults != 0){
data <- rbind(data,getChannel(channel$items[[1]]))
}
else{
channels <- APIsearchChannel(results[i,4])
channel <- APIgetChannel(channels$items[[1]]$snippet$channelId)
data <- rbind(data,getChannel(channel$items[[1]]))
}
}
}
}
results[1,2]
results[[1,2]]
results
results[1]
results[1][1]
results[1][1][1]
results[[1]]
results[[1]][1]
results[[1]][2]
results[[1,2]]
results[[1]][[2]]
results[[1]][[1]]
results[,2]
results[1]
results[1][2]
results[1][[2]]
mode(results[1])
results[200]
results[200][1]
results[200][2]
results[200,2]
library("tidyverse")
data <- read.csv(file = 'data/dataset_adjusted.csv')
ggplot(data)
gg <- ggplot(data, aes(x=statistics_subscriberCount, color=youtube_playlist))+
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")+
labs(title="Subscribers", x="Subscriber count", y="Frequency")
print(gg)
data <- read.csv(file = 'data/dataset_adjusted.csv')
setwd("C:/Users/lizzy/Desktop/Universita/coding for data science and data management/R/project/YouTubeChannels")
data <- read.csv(file = 'data/dataset_adjusted.csv')
ggplot(data)
gg <- ggplot(data, aes(x=statistics_subscriberCount, color=youtube_playlist))+
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")+
labs(title="Subscribers", x="Subscriber count", y="Frequency")
print(gg)
gg <- ggplot(data, aes(x=statistics_subscriberCount, color=youtube_playlist))+
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=100000,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")+
labs(title="Subscribers", x="Subscriber count", y="Frequency")
print(gg)
gg <- ggplot(data, aes(x=statistics_subscriberCount, color=youtube_playlist))+
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=100000,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")+
labs(title="Subscribers", x="Subscriber count", y="Frequency")
print(gg)
gg <- ggplot(data, aes(x=statistics_subscriberCount, color=youtube_playlist))+
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=100000000000,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")+
labs(title="Subscribers", x="Subscriber count", y="Frequency")
print(gg)
gg <- ggplot(data, aes(x=statistics_subscriberCount, color=youtube_playlist))+
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=10000000000,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")+
labs(title="Subscribers", x="Subscriber count", y="Frequency")
print(gg)
gg <- ggplot(data, aes(x=statistics_subscriberCount, color=youtube_playlist))+
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=1000000000,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")+
labs(title="Subscribers", x="Subscriber count", y="Frequency")
print(gg)
gg <- ggplot(data, aes(x=statistics_subscriberCount, color=youtube_playlist))+
geom_histogram(aes(x=..density..),      # Histogram with density instead of count on y-axis
binwidth=1000000000,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")+
labs(title="Subscribers", x="Subscriber count", y="Frequency")
print(gg)
gg <- ggplot(data, aes(x=statistics_subscriberCount))+
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=1000000000,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")+
labs(title="Subscribers", x="Subscriber count", y="Frequency")
print(gg)
gg <- ggplot(data, aes(x=statistics_subscriberCount))+
geom_histogram(     # Histogram with density instead of count on y-axis
binwidth=1000000000,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")+
labs(title="Subscribers", x="Subscriber count", y="Frequency")
print(gg)
gg <- ggplot(data, aes(x=statistics_subscriberCount))+
geom_histogram() +
labs(title="Subscribers", x="Subscriber count", y="Frequency")
print(gg)
gg <- ggplot(data, aes(x=statistics_subscriberCount))+
geom_histogram(colour="black", fill="white") +
labs(title="Subscribers", x="Subscriber count", y="Frequency")
print(gg)
gg <- ggplot(data, aes(x=statistics_subscriberCount))+
geom_histogram(aes(y=..density..),
colour="black", fill="white") +
labs(title="Subscribers", x="Subscriber count", y="Frequency")
print(gg)
gg <- ggplot(data, aes(x=statistics_subscriberCount))+
geom_histogram(aes(y=..density..),
colour="black", fill="white") +
geom_vline(aes(xintercept=mean(statistics_subscriberCount, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)+
labs(title="Subscribers", x="Subscriber count", y="Density")
print(gg)
gg <- ggplot(data, aes(x=statistics_subscriberCount))+
geom_histogram(aes(y=..density..),
colour="black", fill="white") +
geom_vline(aes(xintercept=mean(statistics_subscriberCount, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)+
geom_density(alpha=.2, fill="#FF6666")+
labs(title="Subscribers", x="Subscriber count", y="Density")
print(gg)
shiny::runApp()
runApp()
max_subs <- max(data$statistics_subscriberCount)
max_subs
max_subs <- max(data$statistics_subscriberCount,, na.rm=T)
max_subs <- max(data$statistics_subscriberCount, na.rm=T)
max_subs
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data[data$youtube_playlist==0]
runApp()
runApp()
runApp()
runApp()
runApp()
data[data$youtube_playlist==0]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
