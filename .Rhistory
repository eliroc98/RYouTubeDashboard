results[[1]][[1]]
results[,2]
results[1]
results[1][2]
results[1][[2]]
mode(results[1])
results[200]
results[200][1]
results[200][2]
results[200,2]
df<-data.frame(channel<-rep(d$snippet_title,2), count=c(log10(d$statistics_subscriberCount),log10(d$statistics_viewCount)),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
df<-data.frame(channel<-rep(d$snippet_title,2), count=c(lapply(d$statistics_subscriberCount,fun=log10),lapply(d$statistics_viewCount,log10),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
lapply(d$statistics_subscriberCount,fun=log10)
lapply(d$statistics_subscriberCount,FUN=log10)
df<-data.frame(channel<-rep(d$snippet_title,2), count=c(lapply(d$statistics_subscriberCount,FUN=log10),lapply(d$statistics_viewCount,FUN=log10),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d)))))
ggplot(df, aes(x = channel,fill=count_type,y=count)) +
geom_col(position = position_dodge())
setwd("C:/Users/lizzy/Desktop/Universita/coding for data science and data management/R/project/YouTubeChannels")
library(shiny)
library('tidyverse')
library(DT)
library(bslib)
source("r_files\\utils.R")
max_subs <- max(data$statistics_subscriberCount, na.rm=T)
d<-data[1:10,]
df<-data.frame(channel<-rep(d$snippet_title,2), count=c(lapply(d$statistics_subscriberCount,FUN=log10),lapply(d$statistics_viewCount,FUN=log10),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d)))))
ggplot(df, aes(x = channel,fill=count_type,y=count)) +
geom_col
setwd("C:/Users/lizzy/Desktop/Universita/coding for data science and data management/R/project/YouTubeChannels")
library(shiny)
library('tidyverse')
library(DT)
library(bslib)
source("r_files\\utils.R")
#import data: data acquisition is performed once because of the YouTube API limit quota
data <- read.csv(file = 'data/dataset_adjusted.csv')
max_subs <- max(data$statistics_subscriberCount, na.rm=T)
d<-data[1:10,]
df<-data.frame(channel<-rep(d$snippet_title,2), count=c(lapply(d$statistics_subscriberCount,FUN=log10),lapply(d$statistics_viewCount,FUN=log10),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d)))))
ggplot(df, aes(x = channel,fill=count_type,y=count)) +
geom_col(position = position_dodge())
d<-data[1:10,]
df<-data.frame(channel<-rep(d$snippet_title,2), count=c(lapply(d$statistics_subscriberCount,FUN=log10),lapply(d$statistics_viewCount,FUN=log10)),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
ggplot(df, aes(x = channel,fill=count_type,y=count)) +
geom_col(position = position_dodge())
df<-data.frame(channel<-rep(d$snippet_title,2), count=c(lapply(d$statistics_subscriberCount,FUN=log2),lapply(d$statistics_viewCount,FUN=log2)),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
ggplot(df, aes(x = channel,fill=count_type,y=count)) +
geom_col(position = position_dodge())
df<-data.frame(channel<-rep(d$snippet_title,2), count=c(lapply(d$statistics_subscriberCount,FUN=log10),lapply(d$statistics_viewCount,FUN=log10)),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
ggplot(df, aes(x = channel,fill=count_type,y=count)) +
geom_col(position = position_dodge())
ui <- fluidPage(
theme = bs_theme(version = 4, bootswatch = "minty"),
titlePanel("Top 100 Youtube Channels"),
sidebarLayout(
sidebarPanel(
conditionalPanel(
condition="input.tabset==1",
h3("Select Data"),
radioButtons("radio_type",
h4("Type of dataset"),
choices = list("Entire" = 1,
"Only Youtube Channels" = 2,
"Only Youtube Playlists" = 3),
selected = 1),
sliderInput("slider_numberSubs",
h4("Number of Subscribers"),
min = 0, max = max_subs, value = c(0, max_subs)),
),
conditionalPanel(
condition="input.tabset==2",
h3("Select Data"),
radioButtons("radio_type_2",
h4("Type of dataset"),
choices = list("Entire" = 1,
"Only Youtube Channels" = 2,
"Only Youtube Playlists" = 3),
selected = 1),
h3("Select Statistics"),
checkboxGroupInput("stats_vars", "Variables:",
c("statistics_viewCount","statistics_subscriberCount","statistics_videoCount"), selected = c("statistics_viewCount","statistics_subscriberCount","statistics_videoCount")),
checkboxGroupInput("stats_to_show","Statistics:",
c("mean","median","variance"),
selected=c("mean")),
),
conditionalPanel(
condition="input.tabset==3",
h3("Select variables"),
radioButtons("radio_type_3",
h4("Type of dataset"),
choices = list("Entire" = 1,
"Only Youtube Channels" = 2,
"Only Youtube Playlists" = 3),
selected = 1),
checkboxGroupInput("show_vars", "Variables to show:",
names(data), selected = c("snippet_title","statistics_viewCount","statistics_subscriberCount","statistics_videoCount")),
)),
mainPanel(
tabsetPanel(id = "tabset",
type = "tabs",
tabPanel("Insights",
plotOutput("insights_plot"),
value=4),
tabPanel("Distribution Plot",
plotOutput("distribution_plot"),
value=1),
tabPanel("Summary Statistics",
DT::dataTableOutput("summary_stats"),
p("Confidence Intervals are computed using the bootstrapping technique."),
value=2),
tabPanel("Dataset",
DT::dataTableOutput("data_table"),
value=3)
)
)
)
)
df<-data.frame(channel<-rep(d$snippet_title,2), count=c(d$statistics_subscriberCount,d$statistics_viewCount),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
ggplot(df, aes(x = channel,fill=count_type,y=count)) +
geom_col(position = position_dodge())
df<-data.frame(channel<-rep(d$snippet_title,2), count=c(lapply(d$statistics_subscriberCount,FUN=log10),lapply(d$statistics_viewCount,FUN=log10)),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
ggplot(df, aes(x = channel,fill=count_type,y=count)) +
geom_col(position = position_dodge())
l<-lapply(d$statistics_subscriberCount,FUN=log10)
l
l1<-lapply(d$statistics_viewCount,FUN=log10)
l1
d$statistics_viewCount
l1<-lapply(d$statistics_subscriberCount,FUN=log10)
l2 <- lapply(d$statistics_viewCount,FUN=log10)
df<-data.frame(channel<-rep(d$snippet_title,2), count=c(l1,l2),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
df<-data.frame(channel<-rep(d$snippet_title,2), count=c(d$statistics_subscriberCount,d$statistics_viewCount),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
df<-data.frame(channel<-rep(d$snippet_title,2), count=c(l1,l2),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
ggplot(df, aes(x = channel,fill=count_type,y=count)) +
geom_col(position = position_dodge())
d<-data[1:10,data$youtube_playlist==0]
d<-data[1:10,][,data$youtube_playlist==0]
d<-data[1:10,]
d<-d[,data$youtube_playlist==0]
d<-d[,d$youtube_playlist==0]
d<-data[1:10,]
d<-d[,d$youtube_playlist==0]
l1<-lapply(d$statistics_subscriberCount,FUN=log10)
l2 <- lapply(d$statistics_viewCount,FUN=log10)
df<-data.frame(channel<-rep(d$snippet_title,2), count=c(l1,l2),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
ggplot(df, aes(x = channel,fill=count_type,y=count)) +
geom_col(position = position_dodge())
d<-data[1:10,]
d<-d[,d$youtube_playlist==0]
l1<-lapply(d$statistics_subscriberCount,FUN=log10)
l2 <- lapply(d$statistics_viewCount,FUN=log10)
df<-data.frame(channel<-rep(d$snippet_title,2), count=c(l1,l2),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
d<-data[,data$youtube_playlist==0]
d<-data[data$youtube_playlist==0]
d<-data[data$youtube_playlist==0,]
d<-d[1:10,]
l1<-lapply(d$statistics_subscriberCount,FUN=log10)
l2 <- lapply(d$statistics_viewCount,FUN=log10)
df<-data.frame(channel<-rep(d$snippet_title,2), count=c(l1,l2),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
ggplot(df, aes(x = channel,fill=count_type,y=count)) +
geom_col(position = position_dodge())
l1
l2
max(l1)
max(l1)
?max
data$statistics_subscriberCount
data$statistics_viewCount
runApp()
#import data: data acquisition is performed once because of the YouTube API limit quota
data <- read.csv(file = 'data/dataset_adjusted.csv')
d<-data[data$youtube_playlist==0,]
d<-d[1:10,]
d$statistics_subscriberCount
l1
d$statistics_viewCount
l2 <- lapply(d$statistics_viewCount,FUN=log10)
l2
l1<-lapply(d$statistics_subscriberCount,FUN=log(base = exp(8)))
log8<- function(x){
return(log(x,base=exp(8)))
}
l1<-lapply(d$statistics_subscriberCount,FUN=log8)
l1
l2 <- lapply(d$statistics_viewCount,FUN=log8)
l2
return(log(x,base=exp(5)))
log8<- function(x){
return(log(x,base=exp(5)))
}
l1<-lapply(d$statistics_subscriberCount,FUN=log8)
l1
l2 <- lapply(d$statistics_viewCount,FUN=log8)
l2
d$statistics_viewCount
return(log(x,base=exp(2)))
log8<- function(x){
return(log(x,base=exp(2)))
}
l1<-lapply(d$statistics_subscriberCount,FUN=log8)
l2 <- lapply(d$statistics_viewCount,FUN=log8)
l1
l2
return(log(x,base=exp(15)))
log8<- function(x){
return(log(x,base=exp(15)))
}
l1<-lapply(d$statistics_subscriberCount,FUN=log8)
l2 <- lapply(d$statistics_viewCount,FUN=log8)
l1
log8<- function(x){
return(log(x,base=exp(2)))
}
d<-data[data$youtube_playlist==0,]
d<-d[1:10,]
l1<-lapply(d$statistics_subscriberCount,FUN=log8)
l2 <- lapply(d$statistics_viewCount,FUN=log8)
df<-data.frame(channel<-rep(d$snippet_title,2), count=c(l1,l2),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
#df<-data.frame(channel<-rep(d$snippet_title,2), count=c(d$statistics_subscriberCount,d$statistics_viewCount),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
ggplot(df, aes(x = channel,fill=count_type,y=count)) +
#geom_col(position = position_dodge())
ui <- fluidPage(
theme = bs_theme(version = 4, bootswatch = "minty"),
titlePanel("Top 100 Youtube Channels"),
sidebarLayout(
sidebarPanel(
conditionalPanel(
condition="input.tabset==1",
h3("Select Data"),
radioButtons("radio_type",
h4("Type of dataset"),
choices = list("Entire" = 1,
"Only Youtube Channels" = 2,
"Only Youtube Playlists" = 3),
selected = 1),
sliderInput("slider_numberSubs",
h4("Number of Subscribers"),
min = 0, max = max_subs, value = c(0, max_subs)),
),
conditionalPanel(
condition="input.tabset==2",
h3("Select Data"),
radioButtons("radio_type_2",
h4("Type of dataset"),
choices = list("Entire" = 1,
"Only Youtube Channels" = 2,
"Only Youtube Playlists" = 3),
selected = 1),
h3("Select Statistics"),
checkboxGroupInput("stats_vars", "Variables:",
c("statistics_viewCount","statistics_subscriberCount","statistics_videoCount"), selected = c("statistics_viewCount","statistics_subscriberCount","statistics_videoCount")),
checkboxGroupInput("stats_to_show","Statistics:",
c("mean","median","variance"),
selected=c("mean")),
),
conditionalPanel(
condition="input.tabset==3",
h3("Select variables"),
radioButtons("radio_type_3",
h4("Type of dataset"),
choices = list("Entire" = 1,
"Only Youtube Channels" = 2,
"Only Youtube Playlists" = 3),
selected = 1),
checkboxGroupInput("show_vars", "Variables to show:",
names(data), selected = c("snippet_title","statistics_viewCount","statistics_subscriberCount","statistics_videoCount")),
)),
mainPanel(
tabsetPanel(id = "tabset",
type = "tabs",
tabPanel("Insights",
plotOutput("insights_plot"),
value=4),
tabPanel("Distribution Plot",
plotOutput("distribution_plot"),
value=1),
tabPanel("Summary Statistics",
DT::dataTableOutput("summary_stats"),
p("Confidence Intervals are computed using the bootstrapping technique."),
value=2),
tabPanel("Dataset",
DT::dataTableOutput("data_table"),
value=3)
)
)
)
)
server <- function(input, output) {
data_to_show <- reactive({
switch(input$radio_type,
"1"={to_show <- data},
"2"={to_show <- data[data$youtube_playlist==0,]},
"3"={to_show <- data[data$youtube_playlist==1,]})
to_show <- to_show[to_show$statistics_subscriberCount>=input$slider_numberSubs[1] & to_show$statistics_subscriberCount<=input$slider_numberSubs[2],]
return(to_show)
})
data_to_show_variables <- reactive({
switch(input$radio_type_3,
"1"={to_show <- data},
"2"={to_show <- data[data$youtube_playlist==0,]},
"3"={to_show <- data[data$youtube_playlist==1,]})
to_show <- to_show[,input$show_vars]
})
statistics_to_show <- reactive({
switch(input$radio_type_2,
"1"={to_show <- data},
"2"={to_show <- data[data$youtube_playlist==0,]},
"3"={to_show <- data[data$youtube_playlist==1,]})
progress <- shiny::Progress$new()
on.exit(progress$close())
progress$set(message = "Making statistics", value = 0)
table_sum <- summary_stats_table(to_show,input$stats_vars,input$stats_to_show,progress)
return(table_sum)
})
output$distribution_plot<-renderPlot({
dt <- data_to_show()
ggplot(dt, aes(x=statistics_subscriberCount))+
geom_histogram(aes(y=..density..),
colour="black", fill="white") +
geom_vline(aes(xintercept=mean(statistics_subscriberCount, na.rm=T)),
color="red", linetype="dashed", size=1)+
geom_density(alpha=.2, fill="#FF6666")+
labs(title="Subscribers", x="Subscriber count", y="Density")
})
output$data_table = DT::renderDataTable({
data_to_show_variables()
})
output$summary_stats = DT::renderDataTable({
statistics_to_show()
})
}
#df<-data.frame(channel<-rep(d$snippet_title,2), count=c(d$statistics_subscriberCount,d$statistics_viewCount),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
ggplot(df, aes(x = channel,fill=count_type,y=count)) +
#geom_col(position = position_dodge())
ui <- fluidPage(
theme = bs_theme(version = 4, bootswatch = "minty"),
titlePanel("Top 100 Youtube Channels"),
sidebarLayout(
sidebarPanel(
conditionalPanel(
condition="input.tabset==1",
h3("Select Data"),
radioButtons("radio_type",
h4("Type of dataset"),
choices = list("Entire" = 1,
"Only Youtube Channels" = 2,
"Only Youtube Playlists" = 3),
selected = 1),
sliderInput("slider_numberSubs",
h4("Number of Subscribers"),
min = 0, max = max_subs, value = c(0, max_subs)),
),
conditionalPanel(
condition="input.tabset==2",
h3("Select Data"),
radioButtons("radio_type_2",
h4("Type of dataset"),
choices = list("Entire" = 1,
"Only Youtube Channels" = 2,
"Only Youtube Playlists" = 3),
selected = 1),
h3("Select Statistics"),
checkboxGroupInput("stats_vars", "Variables:",
c("statistics_viewCount","statistics_subscriberCount","statistics_videoCount"), selected = c("statistics_viewCount","statistics_subscriberCount","statistics_videoCount")),
checkboxGroupInput("stats_to_show","Statistics:",
c("mean","median","variance"),
selected=c("mean")),
),
conditionalPanel(
condition="input.tabset==3",
h3("Select variables"),
radioButtons("radio_type_3",
h4("Type of dataset"),
choices = list("Entire" = 1,
"Only Youtube Channels" = 2,
"Only Youtube Playlists" = 3),
selected = 1),
checkboxGroupInput("show_vars", "Variables to show:",
names(data), selected = c("snippet_title","statistics_viewCount","statistics_subscriberCount","statistics_videoCount")),
)),
mainPanel(
tabsetPanel(id = "tabset",
type = "tabs",
tabPanel("Insights",
plotOutput("insights_plot"),
value=4),
tabPanel("Distribution Plot",
plotOutput("distribution_plot"),
value=1),
tabPanel("Summary Statistics",
DT::dataTableOutput("summary_stats"),
p("Confidence Intervals are computed using the bootstrapping technique."),
value=2),
tabPanel("Dataset",
DT::dataTableOutput("data_table"),
value=3)
)
)
)
)
#df<-data.frame(channel<-rep(d$snippet_title,2), count=c(d$statistics_subscriberCount,d$statistics_viewCount),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
ggplot(df, aes(x = channel,fill=count_type,y=count)) +
geom_col(position = position_dodge())
d<-data[data$youtube_playlist==0,]
d<-d[1:10,]
df<-data.frame(channel<-rep(d$snippet_title,2), count=c(l1,l2),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
#df<-data.frame(channel<-rep(d$snippet_title,2), count=c(d$statistics_subscriberCount,d$statistics_viewCount),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
ggplot(df, aes(x = channel,fill=count_type,y=count)) +
geom_col(position = position_dodge())
#import data: data acquisition is performed once because of the YouTube API limit quota
data <- read.csv(file = 'data/dataset_adjusted.csv')
d<-data[data$youtube_playlist==0,]
d<-d[1:10,]
df<-data.frame(channel<-rep(d$snippet_title,2), count=c(l1,l2),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
#df<-data.frame(channel<-rep(d$snippet_title,2), count=c(d$statistics_subscriberCount,d$statistics_viewCount),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
ggplot(df, aes(x = channel,fill=count_type,y=count)) +
geom_bar(position = position_dodge())
#df<-data.frame(channel<-rep(d$snippet_title,2), count=c(d$statistics_subscriberCount,d$statistics_viewCount),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
ggplot() +
geom_col(df,
aes(x = channel,fill=count_type,y=count),
position = position_dodge())
#df<-data.frame(channel<-rep(d$snippet_title,2), count=c(d$statistics_subscriberCount,d$statistics_viewCount),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
ggplot(df, aes(x = channel,fill=count_type,y=count)) +
geom_col(position = position_dodge())
?ggplot
d<-data[data$youtube_playlist==0,]
d<-d[1:10,]
l1<-lapply(d$statistics_subscriberCount,FUN=log8)
l2 <- lapply(d$statistics_viewCount,FUN=log8)
df<-data.frame(channel<-rep(d$snippet_title,2), count=c(d$statistics_subscriberCount,d$statistics_viewCount),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
#df<-data.frame(channel<-rep(d$snippet_title,2), count=c(d$statistics_subscriberCount,d$statistics_viewCount),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
ggplot(df, aes(x = channel, fill=count_type,y=count)) +
geom_col(position = position_dodge())+
scale_y_continuous(trans = 'log2')
#df<-data.frame(channel<-rep(d$snippet_title,2), count=c(d$statistics_subscriberCount,d$statistics_viewCount),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
ggplot(df, aes(x = channel, fill=count_type,y=count)) +
geom_col(position = position_dodge())+
scale_y_continuous(trans = 'log2',
breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x)))
#df<-data.frame(channel<-rep(d$snippet_title,2), count=c(d$statistics_subscriberCount,d$statistics_viewCount),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
ggplot(df, aes(x = channel, fill=count_type,y=count)) +
geom_col(position = position_dodge())+
scale_y_continuous(trans = 'log2',
breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x)))
#df<-data.frame(channel<-rep(d$snippet_title,2), count=c(d$statistics_subscriberCount,d$statistics_viewCount),count_type=c(rep("subscriberCount",nrow(d)),rep("viewCount",nrow(d))))
require(scales)
ggplot(df, aes(x = channel, fill=count_type,y=count)) +
geom_col(position = position_dodge())+
scale_y_continuous(trans = 'log2',
breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x)))
runApp()
runApp()
runApp()
View(data)
runApp()
data[data$youtube_playlist==0 & data$id!="UCRv76wLBC73jiP7LX4C3l8Q",]
runApp()
names(data[1])
sum(names(data[1]))
sum(names(data[1,]))
sum(names(data[,1]))
df_sums <- data.frame(Music=sum(data$Music))
for(i in 16:ncol(data)){
df_sums[names(data)[i]]<-sum(data[names(data)[,i]])
}
df_sums <- data.frame(Music=sum(data$Music))
for(i in 16:ncol(data)){
df_sums[names(data)[i]]<-sum(data[names(data)[i]])
}
df_sums
ggplot(df_sums, aes(x = "", y = prop, fill = class)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(y = lab.ypos, label = prop), color = "white")+
theme_void()
df_sums <- data.frame(topic="Music", count=sum(data$Music))
for(i in 16:ncol(data)){
df_sums <- rbind(c(names(data)[i],sum(data[names(data)[i]])))
}
df_sums
df_sums <- data.frame(topic="Music", count=sum(data$Music))
for(i in 16:ncol(data)){
df_sums <- rbind(df_sums,c(names(data)[i],sum(data[names(data)[i]])))
}
df_sums
ggplot(df_sums, aes(x = "", y = count, fill = class)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(y = lab.ypos, label = prop), color = "white")+
theme_void()
ggplot(df_sums, aes(x = "", y = count, fill = topic)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(y = topic, label = count), color = "white")+
theme_void()
ggplot(df_sums, aes(x = "", y = count, fill = topic)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
theme_void()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runGitHub("RYouTubeDashboard","eliroc98","master")
