install.packages("Rcpp")
install.packages("Rtools")
source("data_gathering_utils.R")
library(httr)
library(rvest)
library(Rcpp)
library(parallel)
#preparing for code optimization
cores <- detectCores()
clusters <- makeCluster(cores-1)
#web scraping to get 100 most subscribed channels
url <- "https://socialblade.com/youtube/top/100/mostsubscribed"
res <- read_html(url) %>%
html_elements('a') %>%
html_attr(name="href")
#split links to obtain each part
clusterExport(clusters, c("res"))
results <- parLapply(cl=clusters, 1:length(res), fun= function(x){
strsplit(res[x],split="/")
})
stopCluster(clusters)
data <- data.frame(id = 0,
snippet_title = "",
snippet_description = "",
snippet_country="",
snippet_defaultLanguage="",
contentDetails_relatedPlaylists_likes = "",
contentDetails_relatedPlaylists_favorites = "",
contentDetails_relatedPlaylists_uploads = "",
statistics_viewCount = 0,
statistics_subscriberCount = 0,
statistics_videoCount = 0,
topicDetails_topicsIds = "",
topicDetails_topicCategories = "",
stringsAsFactors=FALSE)
channels_strings <- c()
i_channels <- 1
username_strings <- c()
i_username <- 1
for (i in 1:length(results)){
if(results[i,2]=="youtube"){
if(results[i,3]=="channel"){
channel <- APIgetChannel(results[i,4])
data <- rbind(data,getChannel(channel$items[[1]]))
}
if(results[i,3]=="c" || results[i,3]=="user"){
#accounting for trapnation
if(results[i,4]=="-trapnation"){results[i,4]<-"trapnation"}
#accounting for billie eilish
if(results[i,4]==""){results[i,4]<-"billie eilish"}
channel <- APIgetChannelForUsername(results[i,4])
if(channel$pageInfo$totalResults != 0){
data <- rbind(data,getChannel(channel$items[[1]]))
}
else{
channels <- APIsearchChannel(results[i,4])
channel <- APIgetChannel(channels$items[[1]]$snippet$channelId)
data <- rbind(data,getChannel(channel$items[[1]]))
}
}
}
}
data <- data[-1,]
#saving results
write.csv(data,"C:\\Users\\lizzy\\Desktop\\Universita\\coding for data science and data management\\R\\project\\data\\dataset.csv", row.names = FALSE)
#put BILLIE EILISH (was "")
channels_strings[i_channels] <- "UCiGm_E4ZwYSHV3bcW1pnSeQ"
i_channels <- i_channels + 1
#initialize dataframe
#GET CHANNELS
#1. the ones for which I already have channelId
for(i in 1:length(channels_strings)){
channel <- APIgetChannel(channels_strings[i])
data <- rbind(data,getChannel(channel$items[[1]]))
}
#2. the others
#channels we don't find through username
channels_to_search <- c()
i_to_search <- 1
for(i in 1:length(username_strings)){
if(username_strings[i]!=""){
channel <- APIgetChannelForUsername(username_strings[i])
if(channel$pageInfo$totalResults != 0){
data <- rbind(data,getChannel(channel$items[[1]]))
}
else{
channels_to_search[i_to_search] <- username_strings[i]
i_to_search <- i_to_search + 1
}
}
}
#modify -trapnation in trapnation
channels_to_search[48] <- "trapnation"
for(i in 1:length(channels_to_search)){
channels <- APIsearchChannel(channels_to_search[i])
channel <- APIgetChannel(channels$items[[1]]$snippet$channelId)
data <- rbind(data,getChannel(channel$items[[1]]))
}
data <- data[-1,]
#saving results
write.csv(data,"C:\\Users\\lizzy\\Desktop\\Universita\\coding for data science and data management\\R\\project\\data\\dataset.csv", row.names = FALSE)
results
results[285]
results[[285]]
results[[[285]]]
results[[285]]
results[[285]][1]
results[[285]][2]
results[[285]][[2]]
results[[285]][,1]
results[[285,]]
results[285,]
results[285]
class(results[[285]])
length(results[[285]])
length(results[285])
length(results[[285]][])
length(results[[285]][1])
length(results[[285]][[1]])
results[[285]][[1]][2]
source("data_gathering_utils.R")
library(httr)
library(rvest)
library(Rcpp)
library(parallel)
#preparing for code optimization
cores <- detectCores()
clusters <- makeCluster(cores-1)
#web scraping to get 100 most subscribed channels
url <- "https://socialblade.com/youtube/top/100/mostsubscribed"
res <- read_html(url) %>%
html_elements('a') %>%
html_attr(name="href")
#split links to obtain each part
clusterExport(clusters, c("res"))
results <- parLapply(cl=clusters, 1:length(res), fun= function(x){
strsplit(res[x],split="/")
})
stopCluster(clusters)
data <- data.frame(id = 0,
snippet_title = "",
snippet_description = "",
snippet_country="",
snippet_defaultLanguage="",
contentDetails_relatedPlaylists_likes = "",
contentDetails_relatedPlaylists_favorites = "",
contentDetails_relatedPlaylists_uploads = "",
statistics_viewCount = 0,
statistics_subscriberCount = 0,
statistics_videoCount = 0,
topicDetails_topicsIds = "",
topicDetails_topicCategories = "",
stringsAsFactors=FALSE)
for (i in 1:length(results)){
if(results[[i]][[1]][2]=="youtube"){
if(results[[i]][[1]][3]=="channel"){
channel <- APIgetChannel(results[[i]][[1]][4])
data <- rbind(data,getChannel(channel$items[[1]]))
}
if(results[[i]][[1]][3]=="c" || results[[i]][[1]][3]=="user"){
#accounting for trapnation
if(results[[i]][[1]][4]=="-trapnation"){results[[i]][[1]][4]<-"trapnation"}
#accounting for billie eilish
if(results[[i]][[1]][4]==""){results[[i]][[1]][4]<-"billie eilish"}
channel <- APIgetChannelForUsername(results[[i]][[1]][4])
if(channel$pageInfo$totalResults != 0){
data <- rbind(data,getChannel(channel$items[[1]]))
}
else{
channels <- APIsearchChannel(results[[i]][[1]][4])
channel <- APIgetChannel(channels$items[[1]]$snippet$channelId)
data <- rbind(data,getChannel(channel$items[[1]]))
}
}
}
}
data <- data[-1,]
#saving results
write.csv(data,"C:\\Users\\lizzy\\Desktop\\Universita\\coding for data science and data management\\R\\project\\data\\dataset.csv", row.names = FALSE)
for (i in 1:length(results)){
print(i)
if(results[[i]][[1]][2]=="youtube"){
if(results[[i]][[1]][3]=="channel"){
channel <- APIgetChannel(results[[i]][[1]][4])
data <- rbind(data,getChannel(channel$items[[1]]))
}
if(results[[i]][[1]][3]=="c" || results[[i]][[1]][3]=="user"){
#accounting for trapnation
if(results[[i]][[1]][4]=="-trapnation"){results[[i]][[1]][4]<-"trapnation"}
#accounting for billie eilish
if(results[[i]][[1]][4]==""){results[[i]][[1]][4]<-"billie eilish"}
channel <- APIgetChannelForUsername(results[[i]][[1]][4])
if(channel$pageInfo$totalResults != 0){
data <- rbind(data,getChannel(channel$items[[1]]))
}
else{
channels <- APIsearchChannel(results[[i]][[1]][4])
channel <- APIgetChannel(channels$items[[1]]$snippet$channelId)
data <- rbind(data,getChannel(channel$items[[1]]))
}
}
}
}
[[8]][[1]]
results[[8]][[1]]
results[[8]]
results
source("data_gathering_utils.R")
library(httr)
library(rvest)
library(Rcpp)
library(parallel)
#preparing for code optimization
cores <- detectCores()
clusters <- makeCluster(cores-1)
#web scraping to get 100 most subscribed channels
url <- "https://socialblade.com/youtube/top/100/mostsubscribed"
res <- read_html(url) %>%
html_elements('a') %>%
html_attr(name="href")
#split links to obtain each part
clusterExport(clusters, c("res"))
results <- parLapply(cl=clusters, 1:length(res), fun= function(x){
strsplit(res[x],split="/")
})
stopCluster(clusters)
data <- data.frame(id = 0,
snippet_title = "",
snippet_description = "",
snippet_country="",
snippet_defaultLanguage="",
contentDetails_relatedPlaylists_likes = "",
contentDetails_relatedPlaylists_favorites = "",
contentDetails_relatedPlaylists_uploads = "",
statistics_viewCount = 0,
statistics_subscriberCount = 0,
statistics_videoCount = 0,
topicDetails_topicsIds = "",
topicDetails_topicCategories = "",
stringsAsFactors=FALSE)
for (i in 1:length(results)){
if(length(results[[i]][[1]])>2){
if(results[[i]][[1]][2]=="youtube"){
if(results[[i]][[1]][3]=="channel"){
channel <- APIgetChannel(results[[i]][[1]][4])
data <- rbind(data,getChannel(channel$items[[1]]))
}
if(results[[i]][[1]][3]=="c" || results[[i]][[1]][3]=="user"){
#accounting for trapnation
if(results[[i]][[1]][4]=="-trapnation"){results[[i]][[1]][4]<-"trapnation"}
#accounting for billie eilish
if(results[[i]][[1]][4]==""){results[[i]][[1]][4]<-"billie eilish"}
channel <- APIgetChannelForUsername(results[[i]][[1]][4])
if(channel$pageInfo$totalResults != 0){
data <- rbind(data,getChannel(channel$items[[1]]))
}
else{
channels <- APIsearchChannel(results[[i]][[1]][4])
channel <- APIgetChannel(channels$items[[1]]$snippet$channelId)
data <- rbind(data,getChannel(channel$items[[1]]))
}
}
}
}
}
data <- data[-1,]
#saving results
write.csv(data,"C:\\Users\\lizzy\\Desktop\\Universita\\coding for data science and data management\\R\\project\\data\\dataset.csv", row.names = FALSE)
nrow(data)
for (i in 1:length(results)){
if(length(results[[i]][[1]])>2){
if(results[[i]][[1]][2]=="youtube"){
if(results[[i]][[1]][3]=="channel"){
channel <- APIgetChannel(results[[i]][[1]][4])
data <- rbind(data,getChannel(channel$items[[1]]))
}
if(results[[i]][[1]][3]=="c" || results[[i]][[1]][3]=="user"){
#accounting for trapnation
if(results[[i]][[1]][4]=="-trapnation"){results[[i]][[1]][4]<-"trapnation"}
#accounting for billie eilish
if(results[[i]][[1]][4]==""){results[[i]][[1]][4]<-"billie eilish"}
channel <- APIgetChannelForUsername(results[[i]][[1]][4])
print(channel)
if(channel$pageInfo$totalResults != 0){
data <- rbind(data,getChannel(channel$items[[1]]))
}
else{
channels <- APIsearchChannel(results[[i]][[1]][4])
channel <- APIgetChannel(channels$items[[1]]$snippet$channelId)
data <- rbind(data,getChannel(channel$items[[1]]))
}
}
}
}
}
source("data_gathering_utils.R")
library(httr)
library(rvest)
library(Rcpp)
library(parallel)
#preparing for code optimization
cores <- detectCores()
clusters <- makeCluster(cores-1)
#web scraping to get 100 most subscribed channels
url <- "https://socialblade.com/youtube/top/100/mostsubscribed"
res <- read_html(url) %>%
html_elements('a') %>%
html_attr(name="href")
#split links to obtain each part
clusterExport(clusters, c("res"))
results <- parLapply(cl=clusters, 1:length(res), fun= function(x){
strsplit(res[x],split="/")
})
stopCluster(clusters)
data <- data.frame(id = 0,
snippet_title = "",
snippet_description = "",
snippet_country="",
snippet_defaultLanguage="",
contentDetails_relatedPlaylists_likes = "",
contentDetails_relatedPlaylists_favorites = "",
contentDetails_relatedPlaylists_uploads = "",
statistics_viewCount = 0,
statistics_subscriberCount = 0,
statistics_videoCount = 0,
topicDetails_topicsIds = "",
topicDetails_topicCategories = "",
stringsAsFactors=FALSE)
for (i in 1:length(results)){
if(length(results[[i]][[1]])>2){
if(results[[i]][[1]][2]=="youtube"){
if(results[[i]][[1]][3]=="channel"){
channel <- APIgetChannel(results[[i]][[1]][4])
data <- rbind(data,getChannel(channel$items[[1]]))
}
if(results[[i]][[1]][3]=="c" || results[[i]][[1]][3]=="user"){
#accounting for trapnation
if(results[[i]][[1]][4]=="-trapnation"){results[[i]][[1]][4]<-"trapnation"}
#accounting for billie eilish
if(results[[i]][[1]][4]==""){results[[i]][[1]][4]<-"billie eilish"}
channel <- APIgetChannelForUsername(results[[i]][[1]][4])
print(channel)
if(channel$pageInfo$totalResults != 0){
data <- rbind(data,getChannel(channel$items[[1]]))
}
else{
channels <- APIsearchChannel(results[[i]][[1]][4])
channel <- APIgetChannel(channels$items[[1]]$snippet$channelId)
data <- rbind(data,getChannel(channel$items[[1]]))
}
}
}
}
}
source("data_gathering_utils.R")
library(httr)
library(rvest)
library(Rcpp)
library(parallel)
#preparing for code optimization
cores <- detectCores()
clusters <- makeCluster(cores-1)
#web scraping to get 100 most subscribed channels
url <- "https://socialblade.com/youtube/top/100/mostsubscribed"
res <- read_html(url) %>%
html_elements('a') %>%
html_attr(name="href")
#split links to obtain each part
clusterExport(clusters, c("res"))
results <- parLapply(cl=clusters, 1:length(res), fun= function(x){
strsplit(res[x],split="/")
})
stopCluster(clusters)
data <- data.frame(id = 0,
snippet_title = "",
snippet_description = "",
snippet_country="",
snippet_defaultLanguage="",
contentDetails_relatedPlaylists_likes = "",
contentDetails_relatedPlaylists_favorites = "",
contentDetails_relatedPlaylists_uploads = "",
statistics_viewCount = 0,
statistics_subscriberCount = 0,
statistics_videoCount = 0,
topicDetails_topicsIds = "",
topicDetails_topicCategories = "",
stringsAsFactors=FALSE)
for (i in 1:length(results)){
if(length(results[[i]][[1]])>2){
if(results[[i]][[1]][2]=="youtube"){
if(results[[i]][[1]][3]=="channel"){
channel <- APIgetChannel(results[[i]][[1]][4])
data <- rbind(data,getChannel(channel$items[[1]]))
}
if(results[[i]][[1]][3]=="c" || results[[i]][[1]][3]=="user"){
#accounting for trapnation
if(results[[i]][[1]][4]=="-trapnation"){results[[i]][[1]][4]<-"trapnation"}
#accounting for billie eilish
if(results[[i]][[1]][4]==""){results[[i]][[1]][4]<-"billie eilish"}
channel <- APIgetChannelForUsername(results[[i]][[1]][4])
print(channel)
if(channel$pageInfo$totalResults != 0){
data <- rbind(data,getChannel(channel$items[[1]]))
}
else{
channels <- APIsearchChannel(results[[i]][[1]][4])
channel <- APIgetChannel(channels$items[[1]]$snippet$channelId)
data <- rbind(data,getChannel(channel$items[[1]]))
}
}
}
}
}
source("data_gathering_utils.R")
library(httr)
library(rvest)
library(Rcpp)
library(parallel)
#preparing for code optimization
cores <- detectCores()
clusters <- makeCluster(cores-1)
#web scraping to get 100 most subscribed channels
url <- "https://socialblade.com/youtube/top/100/mostsubscribed"
res <- read_html(url) %>%
html_elements('a') %>%
html_attr(name="href")
#split links to obtain each part
clusterExport(clusters, c("res"))
results <- parLapply(cl=clusters, 1:length(res), fun= function(x){
strsplit(res[x],split="/")
})
stopCluster(clusters)
data <- data.frame(id = 0,
snippet_title = "",
snippet_description = "",
snippet_country="",
snippet_defaultLanguage="",
contentDetails_relatedPlaylists_likes = "",
contentDetails_relatedPlaylists_favorites = "",
contentDetails_relatedPlaylists_uploads = "",
statistics_viewCount = 0,
statistics_subscriberCount = 0,
statistics_videoCount = 0,
topicDetails_topicsIds = "",
topicDetails_topicCategories = "",
stringsAsFactors=FALSE)
for (i in 1:length(results)){
if(length(results[[i]][[1]])>2){
if(results[[i]][[1]][2]=="youtube"){
if(results[[i]][[1]][3]=="channel"){
channel <- APIgetChannel(results[[i]][[1]][4])
data <- rbind(data,getChannel(channel$items[[1]]))
}
if(results[[i]][[1]][3]=="c" || results[[i]][[1]][3]=="user"){
#accounting for trapnation
if(results[[i]][[1]][4]=="-trapnation"){results[[i]][[1]][4]<-"trapnation"}
#accounting for billie eilish
if(results[[i]][[1]][4]==""){results[[i]][[1]][4]<-"billie eilish"}
channel <- APIgetChannelForUsername(results[[i]][[1]][4])
print(channel)
if(channel$pageInfo$totalResults != 0){
data <- rbind(data,getChannel(channel$items[[1]]))
}
else{
channels <- APIsearchChannel(results[[i]][[1]][4])
channel <- APIgetChannel(channels$items[[1]]$snippet$channelId)
data <- rbind(data,getChannel(channel$items[[1]]))
}
}
}
}
}
